createCategory:
  handler: functions/categories/createCategory.createCategory
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
      Resource: !GetAtt CategoriesTable.Arn
  events:
    - http:
        path: categories
        method: post
        cors: true
        # authorizer:
        #   name: UserAuthorizer
        #   type: COGNITO_USER_POOLS
        #   arn: !GetAtt UserPool.Arn
        #   claims:
        #     - sub

getCategory:
  handler: functions/categories/getCategory.getCategory
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
      Resource: !GetAtt CategoriesTable.Arn
  events:
    - http:
        path: category/{categoryId}
        method: get
        cors: true

addBookToCategory:
  handler: functions/categories/addBookToCategory.addBookToCategory
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:GetItem
      Resource: !GetAtt CategoriesTable.Arn
  events:
    - http:
        path: categories/{categoryId}/books/{bookId}
        method: post
        cors: true
        # authorizer:
        #   name: UserAuthorizer
        #   type: COGNITO_USER_POOLS
        #   arn: !GetAtt UserPool.Arn
        #   claims:
        #     - sub

remove-book-from-category:
  handler: functions/categories/removeBookFromCategory.removeBookFromCategory
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:DeleteItem
      Resource: !GetAtt CategoriesTable.Arn
  events:
    - http:
        path: categories/{categoryId}/books/{bookId}
        method: delete
        cors: true
        # authorizer:
        #   name: UserAuthorizer
        #   type: COGNITO_USER_POOLS
        #   arn: !GetAtt UserPool.Arn
        #   claims:
        #     - sub

listCategories:
  handler: functions/categories/listCategories.listCategories
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
      Resource: !GetAtt CategoriesTable.Arn
  events:
    - http:
        path: categories
        method: get
        cors: true

listBooksByCategory:
  handler: functions/categories/listBooksByCategory.listBooksByCategory
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
      Resource:
        - !GetAtt CategoriesTable.Arn
  events:
    - http:
        path: categories/{categoryId}/books
        method: get
        cors: true

listCategoriesByBook:
  handler: functions/categories/listCategoriesByBook.listCategoriesByBook
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
      Resource:
        - !GetAtt CategoriesTable.Arn
        - !Sub ${CategoriesTable.Arn}/index/*
  events:
    - http:
        path: books/{id}/categories
        method: get
        cors: true

AdminUpdateCategory:
  handler: functions/categories/updateCategory.updateCategory
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource: !GetAtt CategoriesTable.Arn
  events:
    - http:
        path: category/{categoryId}
        method: put
        cors: true
        # authorizer:
        #   name: AdminAuthorizer
        #   type: COGNITO_USER_POOLS
        #   arn: !GetAtt UserPool.Arn
        #   claims:
        #     - sub

AdminDeleteCategory:
  handler: functions/categories/deleteCategory.deleteCategory
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:DeleteItem
        - dynamodb:TransactWriteItems
      Resource: !GetAtt CategoriesTable.Arn
  events:
    - http:
        path: category/{categoryId}
        method: delete
        cors: true
        # authorizer:
        #   name: AdminAuthorizer
        #   type: COGNITO_USER_POOLS
        #   arn: !GetAtt UserPool.Arn
        #   claims:
        #     - sub